name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  # 테스트 및 빌드 검증
  test-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test --if-present

      - name: Bundle analyzer
        run: |
          npm run build -- --analyze
          ls -la dist/
        env:
          VITE_BUNDLE_ANALYZER: true

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          VITE_SENTRY_ORG: ${{ secrets.VITE_SENTRY_ORG }}
          VITE_SENTRY_PROJECT: ${{ secrets.VITE_SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ matrix.node-version }}
          path: dist/
          retention-days: 1

  # 보안 검사
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install security tools
        run: |
          npm install -g audit-ci snyk
          npm install --save-dev @types/node

      - name: Run npm security audit
        run: npm audit --audit-level high

      - name: Run audit-ci
        run: npx audit-ci --config .audit-ci.json

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: License compliance check
        run: |
          npx license-checker --summary --excludePrivatePackages > licenses.txt
          cat licenses.txt

  # Lighthouse 성능 테스트
  performance-test:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-18
          path: dist/

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 스테이징 배포
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-audit]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')

    environment:
      name: staging
      url: https://wearevibers-staging.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build for staging
        run: npm run build:dev
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          VITE_SENTRY_ORG: ${{ secrets.VITE_SENTRY_ORG }}
          VITE_SENTRY_PROJECT: ${{ secrets.VITE_SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          NODE_ENV: development
          VITE_APP_ENV: staging

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: "--env NODE_ENV=development"
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          alias-domains: wearevibers-staging.vercel.app

  # 프로덕션 배포
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-audit, performance-test]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))

    environment:
      name: production
      url: https://wearevibers.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          VITE_SENTRY_ORG: ${{ secrets.VITE_SENTRY_ORG }}
          VITE_SENTRY_PROJECT: ${{ secrets.VITE_SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          NODE_ENV: production

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: "--prod"
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

      - name: Post-deployment health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

          # Health check with retry
          for i in {1..5}; do
            if curl -f https://wearevibers.vercel.app/health; then
              echo "Health check passed!"
              break
            else
              echo "Health check failed, attempt $i/5"
              if [ $i -eq 5 ]; then
                echo "Health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: Performance verification
        run: |
          # Basic performance check
          response_time=$(curl -o /dev/null -s -w '%{time_total}' https://wearevibers.vercel.app)
          echo "Response time: ${response_time}s"

          # Fail if response time > 3 seconds
          if (( $(echo "$response_time > 3.0" | bc -l) )); then
            echo "Response time too slow: ${response_time}s"
            exit 1
          fi

  # 롤백 작업
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]

    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back to previous version..."
          # Vercel rollback logic would go here
