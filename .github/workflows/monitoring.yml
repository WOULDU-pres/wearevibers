name: Production Monitoring & Health Checks

on:
  schedule:
    # Every 5 minutes during business hours (KST 9-18)
    - cron: '*/5 0-9 * * 1-5'  # UTC time
    # Every hour outside business hours
    - cron: '0 10-23,0 * * *'
    # Every 30 minutes on weekends
    - cron: '*/30 * * * 0,6'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check to run'
        required: true
        default: 'full'
        type: choice
        options:
          - quick
          - full
          - performance
          - security

jobs:
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout monitoring scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/monitoring
            .github/workflows
          sparse-checkout-cone-mode: false

      - name: Setup monitoring environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq bc
          
      - name: Basic health check
        id: health
        run: |
          echo "🏥 Running health checks..."
          
          # Test main domain
          MAIN_RESPONSE=$(curl -s -o /dev/null -w "%{http_code},%{time_total},%{size_download}" https://wearevibers.vercel.app/health)
          MAIN_STATUS=$(echo $MAIN_RESPONSE | cut -d',' -f1)
          MAIN_TIME=$(echo $MAIN_RESPONSE | cut -d',' -f2)
          MAIN_SIZE=$(echo $MAIN_RESPONSE | cut -d',' -f3)
          
          echo "main_status=$MAIN_STATUS" >> $GITHUB_OUTPUT
          echo "main_time=$MAIN_TIME" >> $GITHUB_OUTPUT
          echo "main_size=$MAIN_SIZE" >> $GITHUB_OUTPUT
          
          # Test critical pages
          PAGES=("/" "/auth" "/dashboard")
          for page in "${PAGES[@]}"; do
            echo "Testing page: $page"
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code},%{time_total}" https://wearevibers.vercel.app$page)
            STATUS=$(echo $RESPONSE | cut -d',' -f1)
            TIME=$(echo $RESPONSE | cut -d',' -f2)
            
            if [ "$STATUS" != "200" ]; then
              echo "❌ Page $page failed with status $STATUS"
              echo "failed_page=$page" >> $GITHUB_OUTPUT
              echo "failed_status=$STATUS" >> $GITHUB_OUTPUT
            else
              echo "✅ Page $page: ${TIME}s"
            fi
          done

      - name: Performance check
        if: github.event.inputs.check_type == 'performance' || github.event.inputs.check_type == 'full'
        id: performance
        run: |
          echo "⚡ Running performance checks..."
          
          # Response time threshold (3 seconds)
          THRESHOLD=3.0
          
          if (( $(echo "${{ steps.health.outputs.main_time }} > $THRESHOLD" | bc -l) )); then
            echo "🐌 Performance warning: Response time ${{ steps.health.outputs.main_time }}s exceeds ${THRESHOLD}s"
            echo "performance_issue=true" >> $GITHUB_OUTPUT
            echo "response_time=${{ steps.health.outputs.main_time }}" >> $GITHUB_OUTPUT
          else
            echo "🚀 Performance OK: Response time ${{ steps.health.outputs.main_time }}s"
          fi
          
          # Check Core Web Vitals via API
          if [ -n "${{ secrets.PAGESPEED_API_KEY }}" ]; then
            echo "Checking Core Web Vitals..."
            PAGESPEED_URL="https://www.googleapis.com/pagespeedonline/v5/runPagespeed"
            PAGESPEED_RESPONSE=$(curl -s "${PAGESPEED_URL}?url=https://wearevibers.vercel.app&key=${{ secrets.PAGESPEED_API_KEY }}&category=performance")
            
            PERFORMANCE_SCORE=$(echo $PAGESPEED_RESPONSE | jq -r '.lighthouseResult.categories.performance.score')
            if [ "$PERFORMANCE_SCORE" != "null" ]; then
              PERFORMANCE_PERCENT=$(echo "$PERFORMANCE_SCORE * 100" | bc -l | cut -d'.' -f1)
              echo "performance_score=$PERFORMANCE_PERCENT" >> $GITHUB_OUTPUT
              
              if [ "$PERFORMANCE_PERCENT" -lt 85 ]; then
                echo "performance_low=true" >> $GITHUB_OUTPUT
              fi
            fi
          fi

      - name: Database connectivity check
        id: database
        run: |
          echo "🗄️ Checking database connectivity..."
          
          # Test health endpoint which includes DB check
          DB_HEALTH=$(curl -s https://wearevibers.vercel.app/health | jq -r '.services.database')
          echo "database_status=$DB_HEALTH" >> $GITHUB_OUTPUT
          
          if [ "$DB_HEALTH" != "healthy" ]; then
            echo "❌ Database connectivity issue: $DB_HEALTH"
            echo "database_issue=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Database connectivity OK"
          fi

      - name: Security check
        if: github.event.inputs.check_type == 'security' || github.event.inputs.check_type == 'full'
        id: security
        run: |
          echo "🔒 Running security checks..."
          
          # Check security headers
          SECURITY_HEADERS=(
            "X-Frame-Options"
            "X-Content-Type-Options" 
            "Referrer-Policy"
            "Permissions-Policy"
          )
          
          for header in "${SECURITY_HEADERS[@]}"; do
            HEADER_VALUE=$(curl -s -I https://wearevibers.vercel.app | grep -i "$header" | head -1)
            if [ -z "$HEADER_VALUE" ]; then
              echo "⚠️ Missing security header: $header"
              echo "missing_headers=true" >> $GITHUB_OUTPUT
            else
              echo "✅ Security header present: $header"
            fi
          done
          
          # Check SSL certificate
          SSL_EXPIRY=$(echo | openssl s_client -servername wearevibers.vercel.app -connect wearevibers.vercel.app:443 2>/dev/null | openssl x509 -noout -enddate | cut -d= -f2)
          SSL_EXPIRY_EPOCH=$(date -d "$SSL_EXPIRY" +%s)
          CURRENT_EPOCH=$(date +%s)
          DAYS_UNTIL_EXPIRY=$(( (SSL_EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))
          
          echo "ssl_days_remaining=$DAYS_UNTIL_EXPIRY" >> $GITHUB_OUTPUT
          
          if [ "$DAYS_UNTIL_EXPIRY" -lt 30 ]; then
            echo "ssl_expiring_soon=true" >> $GITHUB_OUTPUT
            echo "🚨 SSL certificate expires in $DAYS_UNTIL_EXPIRY days!"
          else
            echo "✅ SSL certificate valid for $DAYS_UNTIL_EXPIRY days"
          fi

      - name: Generate monitoring report
        id: report
        run: |
          echo "📊 Generating monitoring report..."
          
          REPORT="## 🏥 Health Check Report - $(date)\n\n"
          
          # Health Status
          if [ "${{ steps.health.outputs.main_status }}" = "200" ]; then
            REPORT+="✅ **Application Status**: Healthy\n"
          else
            REPORT+="❌ **Application Status**: Unhealthy (Status: ${{ steps.health.outputs.main_status }})\n"
          fi
          
          # Performance
          REPORT+="⚡ **Response Time**: ${{ steps.health.outputs.main_time }}s\n"
          if [ -n "${{ steps.performance.outputs.performance_score }}" ]; then
            REPORT+="📊 **Lighthouse Score**: ${{ steps.performance.outputs.performance_score }}%\n"
          fi
          
          # Database
          REPORT+="🗄️ **Database**: ${{ steps.database.outputs.database_status }}\n"
          
          # Security
          if [ -n "${{ steps.security.outputs.ssl_days_remaining }}" ]; then
            REPORT+="🔒 **SSL Certificate**: ${{ steps.security.outputs.ssl_days_remaining }} days remaining\n"
          fi
          
          echo -e "$REPORT" > monitoring_report.md
          
          # Set alert status
          ALERT_LEVEL="info"
          if [ "${{ steps.health.outputs.main_status }}" != "200" ] || [ "${{ steps.database.outputs.database_issue }}" = "true" ]; then
            ALERT_LEVEL="error"
          elif [ "${{ steps.performance.outputs.performance_issue }}" = "true" ] || [ "${{ steps.security.outputs.ssl_expiring_soon }}" = "true" ]; then
            ALERT_LEVEL="warning"
          fi
          
          echo "alert_level=$ALERT_LEVEL" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        if: always() && (steps.report.outputs.alert_level == 'error' || steps.report.outputs.alert_level == 'warning')
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.report.outputs.alert_level == 'error' && 'failure' || 'warning' }}
          channel: '#monitoring'
          title: '🚨 WeAreVibers Monitoring Alert'
          text: |
            **Alert Level**: ${{ steps.report.outputs.alert_level }}
            **Status Code**: ${{ steps.health.outputs.main_status }}
            **Response Time**: ${{ steps.health.outputs.main_time }}s
            **Database**: ${{ steps.database.outputs.database_status }}
            
            **Timestamp**: $(date)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub issue for critical failures
        if: steps.report.outputs.alert_level == 'error'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 Critical Production Issue - ${new Date().toISOString()}`;
            const body = `
            ## Critical Production Issue Detected
            
            **Alert Time**: ${new Date().toISOString()}
            **Status Code**: ${{ steps.health.outputs.main_status }}
            **Response Time**: ${{ steps.health.outputs.main_time }}s
            **Database Status**: ${{ steps.database.outputs.database_status }}
            
            ## Required Actions
            - [ ] Investigate application health
            - [ ] Check server logs
            - [ ] Verify database connectivity
            - [ ] Confirm rollback if necessary
            
            ## Monitoring Data
            - Health Check: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            **Auto-generated by monitoring workflow**
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['critical', 'production', 'monitoring']
            });

      - name: Upload monitoring artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-report-${{ github.run_number }}
          path: |
            monitoring_report.md
          retention-days: 30